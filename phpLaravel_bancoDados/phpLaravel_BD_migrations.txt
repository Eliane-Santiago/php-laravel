### BANCO DE DADOS - MIGRATIONS

- Migrations nos permite modelar o banco de dados da aplicação através do próprio php 
- Modelamos as tabelas do banco de dados através das migrations
- Migration são como pequenos blocos de scrits capaz de executar ações no BD

CAMINHO: databese/migrations

ESTRUTURA MIGRATIONS:

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateSiteContatosTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('site_contatos', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('site_contatos');
    }
}



>>> CRIANDO AS MIGRATION  E A MODEL SIMULTÂNEAMENTE 
OBS: DIGITAR OS COMANDOS ABAIXO NO CMD

php artisan make:model Fornecedor -m

OBS: O "-m" cria a model 

>>> CRIANDO AS MIGRATION  
OBS: DIGITAR OS COMANDOS ABAIXO NO CMD

php artisan make:migration create_fornecedores_table

OBS: forma padrão para nomear as migration "create_fornecedores_table"

>>> EXECUTANDO AS MIGRATION
OBS: DIGITAR OS COMANDOS ABAIXO NO CMD

php artisan migrate

OBS: Quando executar esse comando será criado no banco todas as configurações realizados na migration


>>> CONFIGURANDO AS MIGRATIONS

OBS(01): Quando for configurar as migrations consultar a documentação no site abaixo

https://laravel.com/docs/7.x/migrations

OBS(02):  Segue abaixo onde as migrations são criadas
Schema::create('site_contatos', function (Blueprint $table) {

		//CRIANDO AS TABELAS
		$table->id();
		$table->timestamps();
		$table->string('nome', 50);
		$table->string('telefone', 20);
		$table->string('email', 80);
		$table->integer('motivo_contato');
		$table->text('mensagem');
});


OBS(03):  Modelo do arquivo migrations

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateSiteContatosTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('site_contatos', function (Blueprint $table) {
			
			//CRIANDO AS TABELAS
            $table->id();
            $table->timestamps();
            $table->string('nome', 50);
            $table->string('telefone', 20);
            $table->string('email', 80);
            $table->integer('motivo_contato');
            $table->text('mensagem');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('site_contatos');
    }
}

>>> CRIANDO MIGRATION DE ATUALIZAÇÃO - CRIANDO NOVAS COLUNAS
OBS(01): DIGITAR OS COMANDOS ABAIXO NO CMD

php artisan make:migration alter_fornecedores_novas_colunas

ESTRUTURA MIGRATION DE ATUALIZAÇÃO:
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AlterFornecedoresNovasColunas extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        //CRIAR A FUNÇÃO SCHEMA E DIGITAR DENTRO AS COLUNAS QUE DESEJA INCLUIR
		Schema::table('fornecedores', function (Blueprint $table) {
			
            $table->string('nome', 50);
			$table->string('uf', 2);
			$table->string('email', 150);
           
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //
    }
}

OBS(02): DEPOIS QUE DIGITAR AS COLUNAS CRIADAS EXECUTAR O COMANDO ABAIXO PARA APLICAR AS MUDANÇAS NO BD

php artisan migrate 

### BANCO DE DADOS - SQL LITE

- Banco de dados relacional imbutido no laravel
- Não precisa usar um gerenciador de banco de dados


>>> CONFIGURANDO A COMUNICAÇÃO COM O BANCO DE DADOS

CAMINHO: config/database.php(arquivo de conexões db)/connections(array associativo das conexões)


>>> ESTRUTURA DO ARQUIVOS database.php: 

<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for all database work. Of course
    | you may use many connections at once using the Database library.
    |
    */

    'default' => env('DB_CONNECTION', 'mysql'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Here are each of the database connections setup for your application.
    | Of course, examples of configuring each database platform that is
    | supported by Laravel is shown below to make development simple.
    |
    |
    | All database work in Laravel is done through the PHP PDO facilities
    | so make sure you have the driver for your particular database of
    | choice installed on your machine before you begin development.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DATABASE_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')), 
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
			
			//QUANDO USAR ESSE CONEXÃO TEM QUE CRIAR O ARQUIVO database.sqlite DENTRO DA PASTA /database
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'schema' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run in the database.
    |
    */

    'migrations' => 'migrations',

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as APC or Memcached. Laravel makes it easy to dig right in.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'password' => env('REDIS_PASSWORD', null),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'password' => env('REDIS_PASSWORD', null),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];

>>> VARIÁVEIS DE AMBIENTE DA CONEXÃO DO DB

CAMINHO: /.env (environment)

OBS: Todas as variáveis de ambiente ficam dentro do arquivo .env

OBS: Instruções do arquivo .env e seus significados
DB_CONNECTION=sqlite (Indica qual será o índice do array associativo do arquivo de database.php ou seja arquivo de conexões do db)

DB_DATABASE=laravel (variável de ambiente)

>>> CONFIGURANDO O SQLITE

PASSO 01: CONFIGURANDO A CONEXÃO DO DB

Abrir o arquivo database.php e localizar a configuração do sqlite 

CAMINHO: config/database.php(arquivo de conexões db)/connections(array associativo das conexões)/sqlite

  'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DATABASE_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')), 
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
			
			//QUANDO USAR ESSE CONEXÃO TEM QUE CRIAR O ARQUIVO database.sqlite DENTRO DA PASTA /database
        ],
		....
		
	]


PASSO 02: CONFIGURANDO AS VARIÁVEIS DE AMBIENTE

Abrir o arquivo /.env (é nesse arquivo que ficam as variáveis de ambiente) e fazer a configuração abaixo

CAMINHO: /.env (environment)

ESTRUTURA: 

APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:IAjPnEs83b0Tn4GdroY+hpq4+KAsKPGP3PbK42rNEmY=
APP_DEBUG=true
APP_URL=http://localhost

LOG_CHANNEL=stack

DB_CONNECTION=mysql // Essa instrução indica qual será o índice do array associativo do arquivo de database.php que será usado na conexão com db
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel //Variável de ambiente. Essa instrução faz referencia a instrução 'database' => env...  do arquivo de database.php (APAGAR ESSA INSTRUÇÃO E CRIAR O ARQUIVO database.sqlite DENTRO DA /databade, os dados de conexão com o banco ficam armezenados nesse arquivo database.sqlite)
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS=null
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=mt1

MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

PASSO 03: DEPOIS DE CONFIGURAR O DB É SÓ EXECUTAR AS MIGRATIONS

OBS: PARA EXECUTAR AS MIGRATIONS É SÓ CONSULTA O ARQUIVO MIGRATIONS DENTRO DA PASTA BANCO DE DADOS
